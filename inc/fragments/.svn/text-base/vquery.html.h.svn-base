char * vquery_html = 
" <div class=\"container\"> \n"
" 	<div class=\"row\"> \n"
" 		<h2>Query</h2> \n"
" 		<div class=\"span6\"><div class=\"well\"> \n"
" 			<h3>Egonet</h3> \n"
" 			<form action=\"\"> \n"
" 				<dl class=\"dl-horizontal\"> \n"
" 					<dt>Vertex (STINGER ID)</dt> \n"
" 					<dd> \n"
" 					<div class=\"input-append\"> \n"
" 						<input class=\"span2\" id=\"newegonet\" type=\"text\"> \n"
" 						<button class=\"btn\" type=\"button\" onclick=\"changeEgonet(this.form)\">Go</button> \n"
" 					</div> \n"
" 					</dd> \n"
" 					<dt>Vertex (Physical ID)</dt> \n"
" 					<dd> \n"
" 					<div class=\"input-append\"> \n"
" 						<input class=\"span2\" id=\"newegonetphys\" type=\"text\"> \n"
" 						<button class=\"btn\" type=\"button\" onclick=\"changeEgonetByPhysID(this.form)\">Go</button> \n"
" 					</div> \n"
" 					</dd> \n"
" 				</dl> \n"
" 			</form> \n"
" 		</div> \n"
" 		   <div class=\"well\"> \n"
" 			  <h3>Neighbors</h3> \n"
" 			  <dl class=\"dl-horizontal\"> \n"
" 			  <dt>Weight</dt> \n"
" 			  <dd> \n"
" 			      <input class=\"span3\" id=\"vweightMin\" type=\"text\" placeholder=\"Min\"> \n"
" 			      <input class=\"span3\" id=\"vweightMax\" type=\"text\" placeholder=\"Max\"> \n"
" 			  </dd> \n"
" 			  <dt>Type</dt> \n"
" 			  <dd> \n"
" 			      <input class=\"span3\" id=\"vtype\" type=\"text\" placeholder=\"Ex: 1,2,7\"> \n"
" 			  </dd> \n"
" 			  <dt>Degree</dt> \n"
" 			  <dd> \n"
" 			      <input class=\"span3\" id=\"vdegreeMin\" type=\"text\" placeholder=\"Min\"> \n"
" 			      <input class=\"span3\" id=\"vdegreeMax\" type=\"text\" placeholder=\"Max\"> \n"
" 			  </dd> \n"
" 			  <dt></dt> \n"
" 			  <dd><div class=\"btn-grp\"><a class=\"btn\" onclick=\"forceGraph()\">Apply</a><a class=\"btn\" onclick=\"resetVertices()\">Clear</a></div></dd> \n"
" 			  </dl> \n"
" 		   </div> \n"
" 		</div> \n"
" 		<div class=\"span6\"> \n"
" 		   <div class=\"well\"> \n"
" 			  <h3>Edges</h3> \n"
" 			  <dl class=\"dl-horizontal\"> \n"
" 			  <dt>Weight</dt> \n"
" 			  <dd> \n"
" 			      <input class=\"span3\" id=\"eweightMin\" type=\"text\" placeholder=\"Min\"> \n"
" 			      <input class=\"span3\" id=\"eweightMax\" type=\"text\" placeholder=\"Max\"> \n"
" 			  </dd> \n"
" 			  <dt>Type</dt> \n"
" 			  <dd> \n"
" 			      <input class=\"span3\" id=\"etype\" type=\"text\" placeholder=\"Ex: 1,2,7\"> \n"
" 			  </dd> \n"
" 			  <dt>Created After</dt> \n"
" 			  <dd> \n"
" 			      <input class=\"span3\" id=\"createdAfter\" type=\"text\" placeholder=\"\"> \n"
" 			  </dd> \n"
" 			  <dt>Created Before</dt> \n"
" 			  <dd> \n"
" 			      <input class=\"span3\" id=\"createdBefore\" type=\"text\" placeholder=\"\"> \n"
" 			  </dd> \n"
" 			  <dt>Modified After</dt> \n"
" 			  <dd> \n"
" 			      <input class=\"span3\" id=\"modifiedAfter\" type=\"text\" placeholder=\"\"> \n"
" 			  </dd> \n"
" 			  <dt>Modified Before</dt> \n"
" 			  <dd> \n"
" 			      <input class=\"span3\" id=\"modifiedBefore\" type=\"text\" placeholder=\"\"> \n"
" 			  </dd> \n"
" 			  <dt></dt> \n"
" 			  <dd><div class=\"btn-grp\"><a class=\"btn\" onclick=\"forceGraph()\">Apply</a><a class=\"btn\" onclick=\"resetEdges()\">Clear</a></div></dd> \n"
" 			  </dl> \n"
" 		  </div> \n"
" 	      </div> \n"
" 	</div> \n"
" 	<div class=\"row\"> \n"
" 		<h2 class=\"egotitle\"></h2> \n"
" 		<div class=\"span12\"><div class=\"well\"> \n"
" 			<p class=\"text-center\"> \n"
" 				&nbsp;<graph></graph>&nbsp; \n"
" 			</p> \n"
" 	</div></div></div> \n"
" 	<div class=\"row\"> \n"
" 	<div class=\"span6\"> \n"
" 			<dl class=\"dl-horizontal\"> \n"
" 			  <dt>Highlighting</dt> \n"
" 			  <dd><label class=\"checkbox\"><input name=\"highlightCenterVertexCB\" id=\"highlightCenterVertexCB\" type=\"checkbox\" checked=\"true\" onclick=\"highlightCenterVertex(this.checked);\">Highlight Central Vertex</label></dd> \n"
" 			  <dt></dt> \n"
" 			  <dd><label class=\"checkbox\"><input name=\"highlightCenterVertexCB\" id=\"highlightCenterEdgesCB\" type=\"checkbox\" checked=\"true\" onclick=\"highlightEdgesOfPrev();\">Highlight Central Edges</label></dd> \n"
" 			  <dt></dt> \n"
" 			  <dd><label class=\"checkbox\"><input name=\"stayLit\" id=\"stayLit\" type=\"checkbox\" checked=\"true\" onclick=\"\">Keep Mouseover Highlights</label></dd> \n"
" 			</dl> \n"
" 		  </div> \n"
" 	<div class=\"span6\"> \n"
" 	  <dl class=\"dl-horizontal\"> \n"
" 	      <dt>Layout</dt><dd><div class=\"btn-grp\"><a class=\"btn btn-success\" onclick=\"unpauseLayout()\" >Start</a><a class=\"btn btn-danger\" onclick=\"pauseLayout()\" >Stop</a></div></dd> \n"
" 	  </dl> \n"
" 	</div></div> \n"
" 	<div class=\"row\"> \n"
" 	<h2>Result</h2> \n"
" 	<h3>Neighbors</h3> \n"
" 	<table class=\"table\"> \n"
" 	<thead id=\"neighborshead\"></thead> \n"
" 	<tbody id=\"neighborsbody\"></tbody> \n"
" 	</table> \n"
" 	<h3>Edges</h3> \n"
" 	<table class=\"table\"> \n"
" 	<thead id=\"edgeshead\"></thead> \n"
" 	<tbody id=\"edgesbody\"></tbody> \n"
" 	</table> \n"
" 	<h3>Neighbors' Edges</h3> \n"
" 	<table class=\"table\"> \n"
" 	<thead id=\"nedgeshead\"></thead> \n"
" 	<tbody id=\"nedgesbody\"></tbody> \n"
" 	</table> \n"
" 	</div> \n"
" </div> \n"
" <script>  \n"
"  \n"
" /*************************** \n"
" * initialization and globals \n"
" */ \n"
"  \n"
" var width = 880,  \n"
"     height = 480;  \n"
"  \n"
" var color = d3.scale.category20();  \n"
"  \n"
" var svglinks, svgnodes; \n"
" var nodedata, linkdata; \n"
" var graphjson; \n"
" var egonetsource; \n"
"  \n"
" var force = d3.layout.force()  \n"
"   .charge(-100)  \n"
"   .linkDistance(80)  \n"
"   .size([width, height]);  \n"
"  \n"
" var svg = d3.select(\"graph\").append(\"svg\")  \n"
"   .attr(\"class\", \"theGraph\") \n"
"   .attr(\"width\", width)  \n"
"   .attr(\"height\", height);  \n"
"  \n"
"  \n"
" d3.json(\"/vquery/data/%ld\", function(error, graph) {  \n"
"     graphjson = graph; \n"
"     egonetsource = graph.vertices[0];  \n"
"     d3.select(\".egotitle\").text(\"Egonet of \" + egonetsource.vid + \" : \" + ((egonetsource.physID.len > 0) ? egonetsource.phydID.id : \"\"));  \n"
"  \n"
"     svglinks = svg.selectAll(\".link\"); \n"
"     svgnodes = svg.selectAll(\".node\"); \n"
"  \n"
"     resetGraph(); \n"
" });  \n"
"  \n"
" /******************* \n"
" * Begin functions \n"
" */ \n"
"  \n"
" function resetVertices() { \n"
"   get(\"vweightMin\").value = \"\"; \n"
"   get(\"vweightMax\").value = \"\"; \n"
"   get(\"vdegreeMin\").value = \"\"; \n"
"   get(\"vdegreeMax\").value = \"\"; \n"
"   get(\"vtype\").value = \"\"; \n"
"  \n"
"   resetGraph(); \n"
" } \n"
"  \n"
" function resetEdges() { \n"
"   get(\"eweightMin\").value = \"\"; \n"
"   get(\"eweightMax\").value = \"\"; \n"
"   get(\"etype\").value = \"\"; \n"
"   get(\"createdAfter\").value = \"\"; \n"
"   get(\"createdBefore\").value = \"\"; \n"
"   get(\"modifiedAfter\").value = \"\"; \n"
"   get(\"modifiedBefore\").value = \"\"; \n"
"  \n"
"   resetGraph(); \n"
" } \n"
"  \n"
" function resetGraph() { \n"
"     nodedata = graphjson.vertices; \n"
"     linkdata = graphjson.edges; \n"
"  \n"
"     forceGraph(); \n"
" } \n"
"  \n"
" function forceGraph() { \n"
"     nodedata = nodedata.filter(vertexFilter); \n"
"     linkdata = linkdata.filter(edgeFilter); \n"
"     nodedata = nodedata.filter(vertexFilter); \n"
"  \n"
"     force  \n"
"       .nodes(nodedata)  \n"
"       .links(linkdata)  \n"
"       .linkDistance(4 * nodedata.length)  \n"
"       .start();  \n"
"  \n"
"     svglinks = svglinks.data(linkdata); \n"
"  \n"
"     svglinks.enter().append(\"line\")  \n"
"       .attr(\"class\", \"link\")  \n"
"       .style(\"stroke-width\", function(d) { return 2 * Math.sqrt(d.weight); })  \n"
"       .style(\"stroke\", function(d) { if(d.source == egonetsource || d.target == egonetsource) return \"#f00\"; else return color(d.type); })  \n"
"       .style(\"stroke-opacity\", function(d) { if(d.source == egonetsource || d.target == egonetsource) return 1.0; else return 0.4; });  \n"
"  \n"
"     svglinks.exit().remove(); \n"
"  \n"
"     svgnodes = svgnodes.data(nodedata); \n"
"  \n"
"     svgnodes.enter() \n"
"       .append(\"circle\")  \n"
"       .attr(\"class\", \"node\")  \n"
"       .attr(\"r\", 5)  \n"
"       .on(\"mouseover\", function(d, i) { d3.select(this).style(\"fill\", \"green\"); highlightEdgesOf(true, d); }) \n"
"       .on(\"mouseout\", function(d, i) { d3.select(this).style(\"fill\", function(d) {if(d == egonetsource && document.getElementById(\"highlightCenterVertexCB\").checked) return \"red\"; else return color(d.vtype); }); if(!document.getElementById(\"stayLit\").checked) highlightEdgesOf(false, d); }) \n"
"       .style(\"fill\", function(d) { if(d == egonetsource) return \"red\"; else return color(d.vtype); })  \n"
"       .call(force.drag) \n"
"       .on(\"dblclick\", function(d) { window.location = \"/vquery/\" + d.vid; }) \n"
"       .append(\"title\")  \n"
"       .text(function(d) { return \"StingerID: \" + d.vid + \"\\n\" + \"Name: \" + d.physID.id + \"\\n\" + \"Type: \" + d.vtype + \"\\n\" + \"Weight: \" + d.vweight + \"\\n\" + \"Degree: \" + d.outDegree; }); \n"
"  \n"
"     svgnodes.exit().remove(); \n"
"  \n"
"     updateNeighborsTable(nprevAttrName); \n"
"     updateEdgesTable(eprevAttrName); \n"
"     updateNEdgesTable(neprevAttrName); \n"
"     highlightEdgesOfPrev(); \n"
"  \n"
"     force.on(\"tick\", function() {  \n"
"       svglinks.attr(\"x1\", function(d) { return d.source.x; })  \n"
" 	.attr(\"y1\", function(d) { return d.source.y; })  \n"
" 	.attr(\"x2\", function(d) { return d.target.x; })  \n"
" 	.attr(\"y2\", function(d) { return d.target.y; });  \n"
"  \n"
"       svgnodes.attr(\"cx\", function(d) { return d.x; })  \n"
" 	.attr(\"cy\", function(d) { return d.y; });  \n"
"     });  \n"
" } \n"
"  \n"
" /* dom shortcut */ \n"
" function get(id) { \n"
"   return document.getElementById(id); \n"
" } \n"
"  \n"
" function hadEdges(vid) { \n"
"   for(l in linkdata) { \n"
"     if(linkdata[l].src == vid || linkdata[l].dest == vid) \n"
"       return true; \n"
"   } \n"
"   return false; \n"
" } \n"
"  \n"
" /* filter on a sinlge vertex for d3's filter call */ \n"
" function vertexFilter(d) { \n"
"   minweight = get(\"vweightMin\").value; \n"
"   if(minweight != \"\" && d.vweight < minweight) \n"
"     return null; \n"
"  \n"
"   maxweight = get(\"vweightMax\").value; \n"
"   if(maxweight != \"\" && maxweight < d.vweight) \n"
"     return null; \n"
"  \n"
"   mindegree = get(\"vdegreeMin\").value; \n"
"   if(mindegree != \"\" && d.outDegree < mindegree) \n"
"     return null; \n"
"  \n"
"   maxdegree = get(\"vdegreeMax\").value; \n"
"   if(maxdegree != \"\" && maxdegree < d.outDegree) \n"
"     return null; \n"
"  \n"
"   types = get(\"vtype\").value.split(\",\"); \n"
"   if(types[0] != \"\") { \n"
"     typefound = false; \n"
"     for(t in types) { \n"
"       if(types[t] == d.vtype) \n"
"         typefound = true; \n"
"     } \n"
"     if(!typefound) \n"
"       return null; \n"
"   } \n"
"  \n"
"   if(!hadEdges(d.vid)) \n"
"     return null; \n"
"  \n"
"   return this; \n"
" } \n"
"  \n"
" function containsVid(arr, v) { \n"
"   for(a in arr) { \n"
"     if(arr[a].vid == v) \n"
"       return true; \n"
"   } \n"
"   return false; \n"
" } \n"
"  \n"
" /* filter function on edges for d3's filter call */ \n"
" function edgeFilter(d) { \n"
"   minweight = get(\"eweightMin\").value; \n"
"   if(minweight != \"\" && d.weight < minweight) \n"
"     return null; \n"
"  \n"
"   maxweight = get(\"eweightMax\").value; \n"
"   if(maxweight != \"\" && maxweight < d.weight) \n"
"     return null; \n"
"  \n"
"   types = get(\"etype\").value.split(\",\"); \n"
"   if(types[0] != \"\") { \n"
"     typefound = false; \n"
"     for(t in types) { \n"
"       if(types[t] == d.type) \n"
" 	typefound = true; \n"
"     } \n"
"     if(!typefound) \n"
"       return null; \n"
"   } \n"
"  \n"
"   createafter = get(\"createdAfter\").value; \n"
"   if(createafter != \"\" && createafter > d.time1) \n"
"     return null; \n"
"  \n"
"   createbefore = get(\"createdBefore\").value; \n"
"   if(createbefore != \"\" && createbefore < d.time1) \n"
"     return null; \n"
"  \n"
"   modifyafter = get(\"modifiedAfter\").value; \n"
"   if(modifyafter != \"\" && modifyafter > d.time2) \n"
"     return null; \n"
"  \n"
"   modifybefore = get(\"modifiedBefore\").value; \n"
"   if(modifybefore != \"\" && modifybefore < d.time2) \n"
"     return null; \n"
"  \n"
"   if(!containsVid(nodedata, d.src) || !containsVid(nodedata, d.dest)) \n"
"     return null; \n"
"  \n"
"   return this; \n"
" } \n"
"  \n"
" function changeEgonet(form) {  \n"
"   window.location = \"/vquery/\" + form.newegonet.value;  \n"
" }  \n"
"  \n"
" function changeEgonetByPhysID(form) {  \n"
"   window.location = \"/vquery/byphysid/\" + form.newegonetphys.value;  \n"
" }  \n"
"  \n"
" function highlightCenterVertex(value) {  \n"
"   if(value) { \n"
"     svgnodes.style(\"fill\", function(d) { if(d == egonetsource) return \"red\"; else return color(d.vtype); })  \n"
"   } else { \n"
"     svgnodes.style(\"fill\", function(d) { return color(d.vtype); })  \n"
"   } \n"
" }  \n"
"  \n"
" function highlightEdgesOfPrev() { \n"
"   highlightEdgesOf(prevHighlightEdges.value, prevHighlightEdges.vtx); \n"
" } \n"
"  \n"
" var prevHighlightEdges = { \"value\": false, \"vtx\": -1 }; \n"
" function highlightEdgesOf(value, vtx) {  \n"
"   prevHighlightEdges.value = value; \n"
"   prevHighlightEdges.vtx = vtx; \n"
"  \n"
"   if(value) { \n"
"     neighbors = new Object(); \n"
"     if(document.getElementById(\"highlightCenterEdgesCB\").checked) { \n"
"       svglinks \n"
" 	.style(\"stroke-width\", function(d) { return 2 * Math.sqrt(d.weight); })  \n"
" 	.style(\"stroke\", function(d) {  \n"
" 	  if(d.source.vid == egonetsource.vid || d.target.vid == egonetsource.vid)  \n"
" 	    return \"#f00\";  \n"
" 	  else if(d.target == vtx) {  \n"
" 	    neighbors[d.source.vid] = 1;  \n"
" 	    return \"green\";   \n"
" 	  } else if (d.source == vtx) { \n"
" 	    neighbors[d.target.vid] = 1;  \n"
" 	    return \"green\";  \n"
" 	  } else  \n"
" 	  return color(d.type);  \n"
" 	})  \n"
" 	.style(\"stroke-opacity\", function(d) { if(d.source.vid == egonetsource.vid || d.target.vid == egonetsource.vid) return 1.0; else if(d.target == vtx || d.source == vtx) return 1.0; else return 0.2; });  \n"
"     } else { \n"
"       svglinks \n"
" 	.style(\"stroke-width\", function(d) { return 2 * Math.sqrt(d.weight); })  \n"
" 	.style(\"stroke\", function(d) {  \n"
" 	  if(d.target == vtx) {  \n"
" 	    neighbors[d.source.vid] = 1;  \n"
" 	    return \"green\";   \n"
" 	  } else if (d.source == vtx) { \n"
" 	    neighbors[d.target.vid] = 1;  \n"
" 	    return \"green\";  \n"
" 	  } else  \n"
" 	  return color(d.type);  \n"
" 	})  \n"
" 	.style(\"stroke-opacity\", function(d) { if(d.target == vtx || d.source == vtx) return 1.0; else return 0.2; });  \n"
"     } \n"
"     highlightVertexRows(vtx.vid, neighbors, \"green\", \"blue\"); \n"
"     highlightEdgeRows(vtx.vid, neighbors, \"green\"); \n"
"     highlightNEdgeRows(vtx.vid, neighbors, \"green\"); \n"
"   } else { \n"
"     if(document.getElementById(\"highlightCenterEdgesCB\").checked) { \n"
"       svglinks \n"
" 	.style(\"stroke-width\", function(d) { return 2 * Math.sqrt(d.weight); })  \n"
" 	.style(\"stroke\", function(d) { if(d.source.vid == egonetsource.vid || d.target.vid == egonetsource.vid) return \"#f00\"; else return color(d.type); })  \n"
" 	.style(\"stroke-opacity\", function(d) { if(d.source.vid == egonetsource.vid || d.target.vid == egonetsource.vid) return 1.0; else return 0.4; });  \n"
"     } else { \n"
"       svglinks \n"
" 	.style(\"stroke-width\", function(d) { return 2 * Math.sqrt(d.weight); })  \n"
" 	.style(\"stroke\", function(d) { return color(d.type); })  \n"
" 	.style(\"stroke-opacity\", function(d) { return 0.4; });  \n"
"     } \n"
"     highlightVertexRows(-1, {}, \"green\", \"blue\"); \n"
"     highlightEdgeRows(-1, {}, \"green\"); \n"
"     highlightNEdgeRows(-1, {}, \"green\"); \n"
"   } \n"
" }  \n"
"  \n"
" function pauseLayout() { \n"
"   for(n in nodedata) { \n"
"     nodedata[n].fixed = 1; \n"
"   } \n"
"  \n"
"   /* stoppble force object */ \n"
"   force.stop(); \n"
" } \n"
"  \n"
" function unpauseLayout() { \n"
"   for(n in nodedata) { \n"
"     nodedata[n].fixed = 0; \n"
"   } \n"
"  \n"
"   /* do or do not, there is no try */ \n"
"   force.resume(); \n"
" } \n"
"  \n"
" var nth, ntr, ntd, nprevAttrName = \"vid\"; \n"
" function updateNeighborsTable(attrName) { \n"
"   nprevAttrName = attrName; \n"
"  \n"
"   var reserved = [\"fixed\",\"weight\",\"x\",\"y\",\"px\",\"py\",\"index\",\"inDegree\"]; /* in degree and out are the same, lets just use one */ \n"
"   d3.select(\"#neighborsbody\").selectAll(\"tr\").remove(); \n"
"   names = {\"vid\":\"STINGER ID\", \"vtype\":\"Type\", \"vweight\":\"Weight\", \"outDegree\":\"Degree\", \"physID\":\"Physical ID\"}; \n"
"  \n"
"   // Header \n"
"   nth = d3.select(\"#neighborshead\").selectAll(\"th\") \n"
"     .data(jsonToArray(nodedata[0], reserved)) \n"
"     .enter().append(\"th\") \n"
"     .attr(\"onclick\", function (d, i) { return \"updateNeighborsTable('\" + d[0] + \"');\";}) \n"
"     .text(function(d) { return names[d[0]]; }) \n"
"  \n"
"   // Rows \n"
"   ntr = d3.select(\"#neighborsbody\").selectAll(\"tr\") \n"
"     .data(nodedata) \n"
"     .enter().append(\"tr\") \n"
"     .sort(function (a, b) { return a == null || b == null ? 0 : (attrName == \"physID\" ? stringCompare(a[attrName].id, b[attrName].id) : stringCompare(a[attrName], b[attrName])); }); \n"
"  \n"
"   // Cells \n"
"   ntd = ntr.selectAll(\"td\") \n"
"     .data(function(d) { return jsonToArray(d, reserved); }) \n"
"     .enter().append(\"td\") \n"
"     .attr(\"onclick\", function (d, i) { return \"updateNeighborsTable('\" + d[0] + \"');\";}) \n"
"     .text(function(d) { return d[0] == \"physID\" ? d[1].id : d[1]; }); \n"
"  \n"
"   highlightVertexRowsPrev(); \n"
" } \n"
"  \n"
" var eth, etr, etd, eprevAttrName = \"dest\"; \n"
" function updateEdgesTable(attrName) { \n"
"   eprevAttrName = attrName; \n"
"  \n"
"   var reserved = [\"source\", \"target\", \"fixed\"]; \n"
"   d3.select(\"#edgesbody\").selectAll(\"tr\").remove(); \n"
"   names = {\"type\":\"Type\", \"src\":\"Source\", \"dest\":\"Destination\", \"weight\":\"Weight\", \"time1\":\"Create Time\", \"time2\" : \"Modify Time\"}; \n"
"  \n"
"   // Header \n"
"   eth = d3.select(\"#edgeshead\").selectAll(\"th\") \n"
"     .data(jsonToArray(linkdata[0], reserved)) \n"
"     .enter().append(\"th\") \n"
"     .attr(\"onclick\", function (d, i) { return \"updateEdgesTable('\" + d[0] + \"');\";}) \n"
"     .text(function(d) { return names[d[0]]; }) \n"
"  \n"
"   // Rows \n"
"   etr = d3.select(\"#edgesbody\").selectAll(\"tr\") \n"
"     .data(linkdata.filter(function(d) { if(d.src != egonetsource.vid && d.dest != egonetsource.vid) return null; else return this; })) \n"
"     .enter().append(\"tr\") \n"
"     .sort(function (a, b) { return a == null || b == null ? 0 : (attrName == \"physID\" ? stringCompare(a[attrName].id, b[attrName].id) : stringCompare(a[attrName], b[attrName])); }); \n"
"  \n"
"   // Cells \n"
"   etd = etr.selectAll(\"td\") \n"
"     .data(function(d) { return jsonToArray(d, reserved); }) \n"
"     .enter().append(\"td\") \n"
"     .attr(\"onclick\", function (d, i) { return \"updateEdgesTable('\" + d[0] + \"');\";}) \n"
"     .text(function(d) { return d[0] == \"physID\" ? d[1].id : d[1]; }); \n"
"  \n"
"   highlightEdgeRowsPrev(); \n"
" } \n"
"  \n"
" var neth, netr, netd, neprevAttrName = \"src\"; \n"
" function updateNEdgesTable(attrName) { \n"
"   neprevAttrName = attrName; \n"
"  \n"
"   var reserved = [\"source\", \"target\", \"fixed\"]; \n"
"   d3.select(\"#nedgesbody\").selectAll(\"tr\").remove(); \n"
"   names = {\"type\":\"Type\", \"src\":\"Source\", \"dest\":\"Destination\", \"weight\":\"Weight\", \"time1\":\"Create Time\", \"time2\" : \"Modify Time\"}; \n"
"  \n"
"   // Header \n"
"   neth = d3.select(\"#nedgeshead\").selectAll(\"th\") \n"
"     .data(jsonToArray(linkdata[0], reserved)) \n"
"     .enter().append(\"th\") \n"
"     .attr(\"onclick\", function (d, i) { return \"updateNEdgesTable('\" + d[0] + \"');\";}) \n"
"     .text(function(d) { return names[d[0]]; }) \n"
"  \n"
"   // Rows \n"
"   netr = d3.select(\"#nedgesbody\").selectAll(\"tr\") \n"
"     .data(linkdata.filter(function(d) { if(d.src == egonetsource.vid || d.dest == egonetsource.vid) return null; else return this; })) \n"
"     .enter().append(\"tr\") \n"
"     .sort(function (a, b) { return a == null || b == null ? 0 : (attrName == \"physID\" ? stringCompare(a[attrName].id, b[attrName].id) : stringCompare(a[attrName], b[attrName])); }); \n"
"  \n"
"   // Cells \n"
"   netd = netr.selectAll(\"td\") \n"
"     .data(function(d) { return jsonToArray(d, reserved); }) \n"
"     .enter().append(\"td\") \n"
"     .attr(\"onclick\", function (d, i) { return \"updateNEdgesTable('\" + d[0] + \"');\";}) \n"
"     .text(function(d) { return d[0] == \"physID\" ? d[1].id : d[1]; }); \n"
"  \n"
"   highlightNEdgeRowsPrev(); \n"
" } \n"
"  \n"
" function highlightVertexRowsPrev() { \n"
"   highlightVertexRows(prevVertexRows.vtx, prevVertexRows.neighbors, prevVertexRows.color1, prevVertexRows.color2); \n"
" } \n"
"  \n"
" var prevVertexRows = {\"vtx\":-1, \"neighbors\":{}, \"color1\":\"green\", \"color2\":\"blue\"}; \n"
" function highlightVertexRows(vtx, neighbors, color1, color2) { \n"
"   prevVertexRows.vtx = vtx; \n"
"   prevVertexRows.neighbors = neighbors; \n"
"   prevVertexRows.color1 = color1; \n"
"   prevVertexRows.color2 = color2; \n"
"  \n"
"   ntr.style(\"background-color\", function(d) {  \n"
"     if(d.vid == egonetsource.vid && document.getElementById(\"highlightCenterVertexCB\").checked) { \n"
"       return \"red\"; \n"
"     } else if(vtx == d.vid) {  \n"
"       return color1;  \n"
"     } else if (neighbors[d.vid]) { \n"
"       return color2; \n"
"     }return this.backgroundColor; }); \n"
" } \n"
"  \n"
" function stringCompare(a, b) { \n"
"   if(typeof(a) == \"string\") \n"
"     a = a.toLowerCase(); \n"
"   if(typeof(b) == \"string\") \n"
"     b = b.toLowerCase(); \n"
"   return a > b ? 1 : a == b ? 0 : -1; \n"
" } \n"
"  \n"
" function highlightEdgeRowsPrev() { \n"
"   highlightEdgeRows(prevEdgeRows.vtx, prevEdgeRows.neighbors, prevEdgeRows.color1); \n"
" } \n"
"  \n"
" var prevEdgeRows = {\"vtx\":-1, \"neighbors\":{}, \"color1\":\"green\"}; \n"
" function highlightEdgeRows(vtx, neighbors, color1) { \n"
"   prevEdgeRows.vtx = vtx; \n"
"   prevEdgeRows.neighbors = neighbors; \n"
"   prevEdgeRows.color1 = color1; \n"
"  \n"
"   etr.style(\"background-color\", function(d) {  \n"
"     if(vtx == d.src || vtx == d.dest) {  \n"
"       return color1;  \n"
"     } \n"
"   }); \n"
" } \n"
"  \n"
" function highlightNEdgeRowsPrev() { \n"
"   highlightNEdgeRows(prevNEdgeRows.vtx, prevNEdgeRows.neighbors, prevNEdgeRows.color1); \n"
" } \n"
"  \n"
" var prevNEdgeRows = {\"vtx\":-1, \"neighbors\":{}, \"color1\":\"green\"}; \n"
" function highlightNEdgeRows(vtx, neighbors, color1) { \n"
"   prevNEdgeRows.vtx = vtx; \n"
"   prevNEdgeRows.neighbors = neighbors; \n"
"   prevNEdgeRows.color1 = color1; \n"
"  \n"
"   netr.style(\"background-color\", function(d) {  \n"
"     if(vtx == d.src || vtx == d.dest) {  \n"
"       return color1;  \n"
"     } \n"
"   }); \n"
" } \n"
"  \n"
" function stringCompare(a, b) { \n"
"   if(typeof(a) == \"string\") \n"
"     a = a.toLowerCase(); \n"
"   if(typeof(b) == \"string\") \n"
"     b = b.toLowerCase(); \n"
"   return a > b ? 1 : a == b ? 0 : -1; \n"
" } \n"
"  \n"
" function jsonKeyValueToArray(k, v) {return [k, v];} \n"
"  \n"
" function jsonToArray(json, reserved) { \n"
"   /* ignore d3's storage values */ \n"
"   var ret = new Array(); \n"
"   var key; \n"
"   for (key in json) { \n"
"     ignore = false; \n"
"     for(r in reserved) { \n"
"       if(reserved[r] == key) { \n"
" 	ignore = true; \n"
" 	break; \n"
"       } \n"
"     } \n"
"     if (json.hasOwnProperty(key) && !ignore) { \n"
"       ret.push(jsonKeyValueToArray(key, json[key])); \n"
"     } \n"
"   } \n"
"   return ret; \n"
" }; \n"
"  \n"
" function dump(obj) { \n"
"   var out = \"\"; \n"
"   for (var i in obj) { \n"
"     out += i + \": \" + obj[i] + \"\\n\"; \n"
"   } \n"
"   console.log(out); \n"
" } \n"
"  \n"
" </script> \n"
" </body> \n"
" </html> \n"
;
